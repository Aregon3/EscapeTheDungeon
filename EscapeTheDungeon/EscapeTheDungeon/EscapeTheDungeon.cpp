// EscapeTheDungeon.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
#include "Map.h"
#include <iostream>
#include "DRaysWals.h"
#include "DSprite.h"
#include "DBackground.h"
#include "PlayerInput.h"
#include <stdio.h>
#include <stdlib.h>
#include <GL/glut.h>
#include <math.h>
#include "Textures/GameOver.ppm"
#include "Textures/End.ppm"
#include "Textures/Title.ppm"



//#define mapX  30
//#define mapY  17     
#define mapX  8
#define mapY  8    
#define mapS 64
float fade = 0;



//-----------------------Game map ( ne e zavurshen :< )-------------------------


/*//int mapW[] =
{
	6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
	6,0,0,0,6,7,0,0,0,0,0,0,0,0,0,6,17,0,0,0,0,0,0,0,0,0,0,0,0,6,
	6,0,0,0,6,7,0,6,6,6,6,6,6,6,0,6,17,0,0,6,18,18,7,7,7,9,9,9,0,6,
	6,0,6,0,0,0,0,7,0,0,0,6,0,6,0,6,17,0,0,7,7,11,13,12,12,12,6,6,0,6,
	6,0,6,0,6,7,7,7,0,6,0,6,0,6,0,6,17,0,0,7,0,0,0,0,0,0,0,0,0,6,
	6,0,6,0,6,6,0,0,0,6,0,0,0,6,0,6,7,0,7,7,0,0,0,6,6,6,6,6,0,6,
	6,0,6,0,6,4,0,7,7,7,6,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,6,
	6,6,6,0,6,4,0,6,0,0,0,6,0,6,6,6,0,6,6,6,0,6,0,6,6,6,6,6,6,6,
	6,0,0,0,6,15,0,18,0,0,0,0,0,0,0,6,0,13,0,0,0,6,0,6,6,0,0,24,0,6,
	6,0,6,0,0,0,0,15,0,6,6,6,0,9,9,9,0,9,9,0,0,6,0,6,6,0,6,6,6,6,
	6,0,6,6,6,6,6,6,0,6,0,6,0,6,0,0,0,0,6,0,0,6,0,6,6,0,0,0,0,6,
	6,0,6,0,0,0,0,15,0,0,0,6,0,6,0,0,0,0,6,0,0,0,0,6,6,6,6,6,0,6,
	6,0,6,0,6,6,6,15,6,6,6,6,0,6,6,6,6,0,6,6,6,6,0,6,0,0,0,6,0,6,
	6,0,6,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,6,0,6,0,6,0,6,
	6,0,6,0,6,0,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,0,6,6,6,0,6,
	6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,
	6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,
};
int mapF[] =          //floors
{
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
};
int mapC[] =          //ceiling
{
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,17,18,17,18,18,18,17,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,17,18,18,18,18,18,18,18,18,18,17,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,17,17,17,17,17,17,17,17,17,18,18,17,17,17,17,17,17,5,17,17,17,17,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
	18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,
};
/*/ //

//---------------------------------------------------test level: -------------------------------------------


void screen(int v) //draw any full screen image. 120x80 pixels
{
	int x, y;
	int* T{};

	if (v == 1) { T = Title; }
	if (v == 2) { T = End; }
	if (v == 3) { T = GameOver; }

	for (y = 0;y < 80;y++)
	{
		for (x = 0;x < 120;x++)
		{
			int pixel = (y * 120 + x) * 3;
			int red = T[pixel + 0] * fade;
			int green = T[pixel + 1] * fade;
			int blue = T[pixel + 2] * fade;

			glPointSize(8);
			glColor3ub(red, green, blue); 
			glBegin(GL_POINTS);
			glVertex2i(x * 8, y * 8);
			glEnd();
		}
	}
	if (fade < 1)
	{
		fade += 0.001 * fps; 
	}
	if (fade > 1) 
	{
		fade = 1; 
	}
}


void init()
{
	glClearColor(0.3, 0.3, 0.3, 0);
	px = 150; 
	py = 400;
	pa = 90;
	pdx = cos(degToRad(pa));
	pdy = -sin(degToRad(pa));                                 

	sp[0].type = 1; sp[0].state = 1; sp[0].map = 3; sp[0].x = 1.5 * 64; sp[0].y = 5 * 64;   sp[0].z = 20; 
	sp[1].type = 2; sp[1].state = 1; sp[1].map = 2; sp[1].x = 1.5 * 64; sp[1].y = 4.5 * 64; sp[1].z = 30;
	sp[2].type = 2; sp[2].state = 1; sp[2].map = 0; sp[2].x = 3.8 * 64; sp[2].y = 6 * 64; sp[2].z = 25; 
	sp[3].type = 3; sp[3].state = 1; sp[3].map = 1; sp[3].x = 2.5 * 64; sp[3].y = 2 * 64;   sp[3].z = 20; 
}


void display()
{
	frame2 = glutGet(GLUT_ELAPSED_TIME); 
	fps = (frame2 - frame1);
	frame1 = glutGet(GLUT_ELAPSED_TIME);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	if (gamestate == 0)
	{ 
		init();
		fade = 0;
		timer = 0;
		gamestate = 1;
	}
	if (gamestate == 1) 
	{ 
		screen(1); 
		timer += 1 * fps;
		if (timer > 2000)
		{ 
			fade = 0;
			timer = 0;
			gamestate = 2;
		}
	} 
	if (gamestate == 2)
	{
		if (Keys.a == 1) { pa += 0.2 * fps; pa = FixAng(pa); pdx = cos(degToRad(pa)); pdy = -sin(degToRad(pa)); }
		if (Keys.d == 1) { pa -= 0.2 * fps; pa = FixAng(pa); pdx = cos(degToRad(pa)); pdy = -sin(degToRad(pa)); }

		int xo = 0; 

		if (pdx < 0)
		{
			xo = -20;
		}
		else 
		{
			xo = 20; 
		} 

		int yo = 0; 

		if (pdy < 0) 
		{
			yo = -20; 
		}
		else 
		{
			yo = 20; 
		}   

		int ipx = px / 64.0, ipx_add_xo = (px + xo) / 64.0, ipx_sub_xo = (px - xo) / 64.0;            
		int ipy = py / 64.0, ipy_add_yo = (py + yo) / 64.0, ipy_sub_yo = (py - yo) / 64.0;             
		if (Keys.w == 1)                                                       
		{
			if (mapW[ipy * mapX + ipx_add_xo] == 0)
			{
				px += pdx * 0.2 * fps; 
			}
			if (mapW[ipy_add_yo * mapX + ipx] == 0) 
			{ 
				py += pdy * 0.2 * fps; 
			}
		}
		if (Keys.s == 1)                                                                
		{
			if (mapW[ipy * mapX + ipx_sub_xo] == 0) 
			{ 
				px -= pdx * 0.2 * fps;
			}
			if (mapW[ipy_sub_yo * mapX + ipx] == 0)
			{ 
				py -= pdy * 0.2 * fps; 
			}
		}
		drawBackground();
		drawRays();
		drawSprite();
		if ((int)px >> 6 == 1 && (int)py >> 6 == 1) { fade = 0; timer = 0; gamestate = 3; }
	}

	if (gamestate == 3) 
	{ 
		screen(2);
		timer += 1 * fps;
		if (timer > 2000) 
		{
			fade = 0;
			timer = 0; 
			gamestate = 0;
		} 
	} 
	if (gamestate == 4) 
	{
		screen(3);
		timer += 1 * fps; 
		if (timer > 2000) 
		{
			fade = 0; 
			timer = 0; 
			gamestate = 0; 
		} 
	} 

	glutPostRedisplay();
	glutSwapBuffers();
}


int main(int argc, char* argv[])
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(960, 640);
	glutInitWindowPosition(glutGet(GLUT_SCREEN_WIDTH)/2-960/2,glutGet(GLUT_SCREEN_HEIGHT)/2-640/2);
	glutCreateWindow("Escape the dungeon");
	gluOrtho2D(0, 960, 640, 0);
	init();
	glutDisplayFunc(display);
	glutKeyboardFunc(ButnDown);
	glutKeyboardUpFunc(ButnUp);
	glutMainLoop();
}
